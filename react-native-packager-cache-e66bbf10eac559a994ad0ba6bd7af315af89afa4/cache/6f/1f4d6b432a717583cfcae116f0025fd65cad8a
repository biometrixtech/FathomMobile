var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _index = require('./../react-transform-hmr/lib/index.js');

var _index2 = _interopRequireDefault(_index);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _jsxFileName = '/Users/vdesai/Biometrix/FathomMobile/node_modules/react-native-side-menu/index.js';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  SideMenu: {
    displayName: 'SideMenu'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: '/Users/vdesai/Biometrix/FathomMobile/node_modules/react-native-side-menu/index.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var styles = require('./styles');
var ReactNative = require('react-native');
var React = require('react');
var Dimensions = ReactNative.Dimensions,
    Animated = ReactNative.Animated;

var deviceScreen = Dimensions.get('window');

var PanResponder = ReactNative.PanResponder,
    View = ReactNative.View,
    TouchableWithoutFeedback = ReactNative.TouchableWithoutFeedback;

var barrierForward = deviceScreen.width / 4;

function shouldOpenMenu(dx) {
  return dx > barrierForward;
}

var SideMenu = _wrapComponent('SideMenu')(function (_React$Component) {
  _inherits(SideMenu, _React$Component);

  function SideMenu(props) {
    _classCallCheck(this, SideMenu);

    var _this = _possibleConstructorReturn(this, (SideMenu.__proto__ || Object.getPrototypeOf(SideMenu)).call(this, props));

    _this.prevLeft = 0;
    _this.isOpen = !!props.isOpen;

    var initialMenuPositionMultiplier = props.menuPosition === 'right' ? -1 : 1;
    var openOffsetMenuPercentage = props.openMenuOffset / deviceScreen.width;
    var hiddenMenuOffsetPercentage = props.hiddenMenuOffset / deviceScreen.width;

    _this.state = {
      width: deviceScreen.width,
      height: deviceScreen.height,
      openOffsetMenuPercentage: openOffsetMenuPercentage,
      openMenuOffset: deviceScreen.width * openOffsetMenuPercentage,
      hiddenMenuOffsetPercentage: hiddenMenuOffsetPercentage,
      hiddenMenuOffset: deviceScreen.width * hiddenMenuOffsetPercentage,
      left: new Animated.Value(props.isOpen ? props.openMenuOffset * initialMenuPositionMultiplier : props.hiddenMenuOffset)
    };
    return _this;
  }

  _createClass(SideMenu, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.responder = PanResponder.create({
        onStartShouldSetResponderCapture: this.props.onStartShouldSetResponderCapture.bind(this),
        onMoveShouldSetPanResponder: this.handleMoveShouldSetPanResponder.bind(this),
        onPanResponderMove: this.handlePanResponderMove.bind(this),
        onPanResponderRelease: this.handlePanResponderEnd.bind(this),
        onPanResponderTerminate: this.handlePanResponderEnd.bind(this)
      });
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {
      if (typeof props.isOpen !== 'undefined' && this.isOpen !== props.isOpen && (props.autoClosing || this.isOpen === false)) {
        this.openMenu(props.isOpen);
      }
    }
  }, {
    key: 'gesturesAreEnabled',
    value: function gesturesAreEnabled() {
      var disableGestures = this.props.disableGestures;


      if (typeof disableGestures === 'function') {
        return !disableGestures();
      }

      return !disableGestures;
    }
  }, {
    key: 'handleMoveShouldSetPanResponder',
    value: function handleMoveShouldSetPanResponder(e, gestureState) {
      if (this.gesturesAreEnabled()) {
        var x = Math.round(Math.abs(gestureState.dx));
        var y = Math.round(Math.abs(gestureState.dy));

        var touchMoved = x > this.props.toleranceX && y < this.props.toleranceY;

        if (this.isOpen) {
          return touchMoved;
        }

        var withinEdgeHitWidth = this.props.menuPosition === 'right' ? gestureState.moveX > deviceScreen.width - this.props.edgeHitWidth : gestureState.moveX < this.props.edgeHitWidth;

        var swipingToOpen = this.menuPositionMultiplier() * gestureState.dx > 0;
        return withinEdgeHitWidth && touchMoved && swipingToOpen;
      }

      return false;
    }
  }, {
    key: 'handlePanResponderMove',
    value: function handlePanResponderMove(e, gestureState) {
      if (this.state.left.__getValue() * this.menuPositionMultiplier() >= 0) {
        var newLeft = this.prevLeft + gestureState.dx;

        if (!this.props.bounceBackOnOverdraw && Math.abs(newLeft) > this.state.openMenuOffset) {
          newLeft = this.menuPositionMultiplier() * this.state.openMenuOffset;
        }

        this.props.onMove(newLeft);
        this.state.left.setValue(newLeft);
      }
    }
  }, {
    key: 'handlePanResponderEnd',
    value: function handlePanResponderEnd(e, gestureState) {
      var offsetLeft = this.menuPositionMultiplier() * (this.state.left.__getValue() + gestureState.dx);

      this.openMenu(shouldOpenMenu(offsetLeft));
    }
  }, {
    key: 'menuPositionMultiplier',
    value: function menuPositionMultiplier() {
      return this.props.menuPosition === 'right' ? -1 : 1;
    }
  }, {
    key: 'moveLeft',
    value: function moveLeft(offset) {
      var newOffset = this.menuPositionMultiplier() * offset;

      this.props.animationFunction(this.state.left, newOffset).start();

      this.prevLeft = newOffset;
    }
  }, {
    key: 'openMenu',
    value: function openMenu(isOpen) {
      var _state = this.state,
          hiddenMenuOffset = _state.hiddenMenuOffset,
          openMenuOffset = _state.openMenuOffset;

      this.moveLeft(isOpen ? openMenuOffset : hiddenMenuOffset);
      this.isOpen = isOpen;

      this.forceUpdate();
      this.props.onChange(isOpen);
    }
  }, {
    key: 'getContentView',
    value: function getContentView() {
      var _this2 = this;

      var overlay = null;

      if (this.isOpen) {
        overlay = React.createElement(
          TouchableWithoutFeedback,
          { onPress: function onPress() {
              return _this2.openMenu(false);
            }, __source: {
              fileName: _jsxFileName,
              lineNumber: 192
            }
          },
          React.createElement(View, { style: styles.overlay, __source: {
              fileName: _jsxFileName,
              lineNumber: 193
            }
          })
        );
      }

      var _state2 = this.state,
          width = _state2.width,
          height = _state2.height;

      var ref = function ref(sideMenu) {
        return _this2.sideMenu = sideMenu;
      };
      var style = [styles.frontView, { width: width, height: height }, this.props.animationStyle(this.state.left)];

      return React.createElement(
        Animated.View,
        _extends({ style: style, ref: ref }, this.responder.panHandlers, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 207
          }
        }),
        this.props.children,
        overlay
      );
    }
  }, {
    key: 'onLayoutChange',
    value: function onLayoutChange(e) {
      var _e$nativeEvent$layout = e.nativeEvent.layout,
          width = _e$nativeEvent$layout.width,
          height = _e$nativeEvent$layout.height;

      var openMenuOffset = width * this.state.openOffsetMenuPercentage;
      var hiddenMenuOffset = width * this.state.hiddenMenuOffsetPercentage;
      this.setState({ width: width, height: height, openMenuOffset: openMenuOffset, hiddenMenuOffset: hiddenMenuOffset });
    }
  }, {
    key: 'render',
    value: function render() {

      var boundryStyle = this.props.menuPosition == 'right' ? { left: this.state.width - this.state.openMenuOffset } : { right: this.state.width - this.state.openMenuOffset };

      var menu = React.createElement(
        View,
        { style: [styles.menu, boundryStyle], __source: {
            fileName: _jsxFileName,
            lineNumber: 231
          }
        },
        this.props.menu
      );

      return React.createElement(
        View,
        { style: styles.container, onLayout: this.onLayoutChange.bind(this), __source: {
            fileName: _jsxFileName,
            lineNumber: 234
          }
        },
        menu,
        this.getContentView()
      );
    }
  }]);

  return SideMenu;
}(React.Component));

SideMenu.propTypes = {
  edgeHitWidth: React.PropTypes.number,
  toleranceX: React.PropTypes.number,
  toleranceY: React.PropTypes.number,
  menuPosition: React.PropTypes.oneOf(['left', 'right']),
  onChange: React.PropTypes.func,
  onMove: React.PropTypes.func,
  openMenuOffset: React.PropTypes.number,
  hiddenMenuOffset: React.PropTypes.number,
  disableGestures: React.PropTypes.oneOfType([React.PropTypes.func, React.PropTypes.bool]),
  animationFunction: React.PropTypes.func,
  onStartShouldSetResponderCapture: React.PropTypes.func,
  isOpen: React.PropTypes.bool,
  bounceBackOnOverdraw: React.PropTypes.bool,
  autoClosing: React.PropTypes.bool
};

SideMenu.defaultProps = {
  toleranceY: 10,
  toleranceX: 10,
  edgeHitWidth: 60,
  openMenuOffset: deviceScreen.width * 2 / 3,
  hiddenMenuOffset: 0,
  onMove: function onMove() {},
  onStartShouldSetResponderCapture: function onStartShouldSetResponderCapture() {
    return true;
  },
  onChange: function onChange() {},
  animationStyle: function animationStyle(value) {
    return {
      transform: [{
        translateX: value
      }]
    };
  },
  animationFunction: function animationFunction(prop, value) {
    return Animated.spring(prop, {
      toValue: value,
      friction: 8
    });
  },
  isOpen: false,
  bounceBackOnOverdraw: true,
  autoClosing: true
};

module.exports = SideMenu;