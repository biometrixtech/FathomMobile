'use strict';

var common = require('./common');

module.exports = function parse(data) {
    var cells = data.split(/Cell \d{2} - /g);
    if (~cells[0].toLocaleLowerCase().indexOf("scan complete")) {
        cells.shift();
    }
    return cells.map(function (cell) {
        return common.parseCell(cell, cellLinesToJSON);
    });
};

function cellLinesToJSON(cellLines) {
    return {
        ssid: cellLines.filter(findSsid).map(extractSsid)[0],
        mac: cellLines.filter(common.findMac).map(common.extractMac)[0],
        channel: cellLines.filter(findChannel).map(extractChannel)[0],
        security: cellLines.filter(findSecurity).map(extractSecurity)
    };
}

function findSsid(line) {
    return ~line.toLowerCase().indexOf("essid");
}

function extractSsid(line) {
    var ssidPattern = /\essid:"(.*)\"/gi;
    return ssidPattern.exec(line)[1];
}

function findChannel(line) {
    var channelPattern = /Channel (\d+)/gi;
    return channelPattern.test(line);
}

function extractChannel(line) {
    var channelPattern = /Channel (\d+)/gi;
    return channelPattern.exec(line)[1];
}

function findSecurity(line) {
    var encryptionPattern = /(encryption key:off|wpa(\d)? version|wep)/gi;
    return encryptionPattern.test(line);
}

function extractSecurity(line) {
    var noEncryption = /Encryption key:off/gi;
    var wpa1 = /wpa version/gi;
    var wpa2 = /wpa2 version/gi;

    if (noEncryption.test(line)) return "None";else if (wpa1.test(line)) return "WPA";else if (wpa2.test(line)) return "WPA2";else return "WEP";
}