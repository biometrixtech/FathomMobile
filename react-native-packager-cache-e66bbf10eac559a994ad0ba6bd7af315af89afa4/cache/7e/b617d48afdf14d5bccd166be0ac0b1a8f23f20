Object.defineProperty(exports, "__esModule", {
    value: true
});
var _jsxFileName = '/Users/vdesai/Biometrix/FathomMobile/src/containers/management/regimens/RegimensView.js';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _reactNativeElements = require('react-native-elements');

var _reactNativeSwipeable = require('react-native-swipeable');

var _reactNativeSwipeable2 = _interopRequireDefault(_reactNativeSwipeable);

var _reactNativeModalbox = require('react-native-modalbox');

var _reactNativeModalbox2 = _interopRequireDefault(_reactNativeModalbox);

var _theme = require('@theme/');

var _reactNativeRouterFlux = require('react-native-router-flux');

var _ui = require('@ui/');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var styles = _reactNative.StyleSheet.create({
    whiteText: {
        color: '#FFF'
    },
    start: {
        color: _theme.AppColors.brand.primary
    },
    stop: {
        color: _theme.AppColors.brand.red
    },
    badgeTextStyle: {
        fontWeight: 'bold'
    },
    cardView: {
        backgroundColor: '#31363D',
        alignItems: 'center'
    },
    listItemStyle: {
        alignItems: 'center',
        justifyContent: 'center',
        height: 40
    }
});

var RegimensView = function (_Component) {
    _inherits(RegimensView, _Component);

    function RegimensView(props) {
        _classCallCheck(this, RegimensView);

        var _this = _possibleConstructorReturn(this, (RegimensView.__proto__ || Object.getPrototypeOf(RegimensView)).call(this, props));

        _this.addRegimen = function () {
            _this.state.regimen.id = _this.state.regimens.length + 1;
            _this.props.addRegimen(_this.state.regimen);
            _this.setState({ regimens: _this.state.regimens.concat([_this.state.regimen]), regimen: { name: '', trainingGroupIds: [] } });
            _reactNativeRouterFlux.Actions.refresh({ isModalVisible: false });
        };

        _this.editRegimen = function () {
            var index = _this.state.regimens.findIndex(function (regimen) {
                return regimen.id === _this.state.regimen.id;
            });
            if (index > -1) {
                _this.state.regimens[index] = _this.state.regimen;
                _this.props.editRegimen(_this.state.regimen);
                _this.setState({ regimens: _this.state.regimens, regimen: { name: '', trainingGroupIds: [] } });
            }
            _reactNativeRouterFlux.Actions.refresh({ isModalVisible: false });
        };

        _this.removeRegimen = function (id) {
            _this.props.removeRegimen(id);
            _this.setState({ regimens: _this.state.regimens.filter(function (regimen) {
                    return regimen.id !== id;
                }) });
        };

        _this.toggleTrainingGroup = function (id) {
            var index = _this.state.regimen.trainingGroupIds.findIndex(function (groupId) {
                return groupId === id;
            });
            if (index > -1) {
                _this.state.regimen.trainingGroupIds.splice(index, 1);
            } else {
                _this.state.regimen.trainingGroupIds.push(id);
            }
            _this.setState({ regimen: _this.state.regimen });
        };

        _this.leftButton = function (data) {
            return _react2.default.createElement(
                _reactNative.View,
                { style: [{ alignItems: 'flex-end', paddingRight: 25 }, _theme.AppStyles.editButton], __source: {
                        fileName: _jsxFileName,
                        lineNumber: 116
                    }
                },
                _react2.default.createElement(_reactNativeElements.Icon, { name: 'pencil', onPress: function onPress() {
                        _this.setState({ regimen: data });_reactNativeRouterFlux.Actions.refresh({ isModalVisible: true });
                    }, type: 'material-community', color: '#FFFFFF', __source: {
                        fileName: _jsxFileName,
                        lineNumber: 117
                    }
                })
            );
        };

        _this.rightButton = function (id) {
            return _react2.default.createElement(
                _reactNative.View,
                { style: [{ alignItems: 'flex-start', paddingLeft: 25 }, _theme.AppStyles.deleteButton], __source: {
                        fileName: _jsxFileName,
                        lineNumber: 122
                    }
                },
                _react2.default.createElement(_reactNativeElements.Icon, { name: 'delete', onPress: function onPress() {
                        _this.removeRegimen(id);
                    }, type: 'material-community', color: '#FFFFFF', __source: {
                        fileName: _jsxFileName,
                        lineNumber: 123
                    }
                })
            );
        };

        _this.render = function () {
            return _react2.default.createElement(
                _reactNative.View,
                { style: [_theme.AppStyles.container], __source: {
                        fileName: _jsxFileName,
                        lineNumber: 130
                    }
                },
                _react2.default.createElement(
                    _reactNative.ScrollView,
                    {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 131
                        }
                    },
                    _this.state.regimens.map(function (regimen) {
                        return _react2.default.createElement(
                            _reactNativeSwipeable2.default,
                            { key: regimen.id, leftButtons: [_this.leftButton(regimen)], rightButtons: [_this.rightButton(regimen.id)], __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 134
                                }
                            },
                            _react2.default.createElement(_ui.ListItem, { hideChevron: true, title: regimen.name, titleContainerStyle: [styles.listItemStyle], __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 135
                                }
                            })
                        );
                    })
                ),
                _react2.default.createElement(
                    _reactNativeModalbox2.default,
                    { style: [_theme.AppStyles.containerCentered, _this.state.modalStyle, { backgroundColor: _theme.AppColors.transparent }], isOpen: _this.props.isModalVisible, backButtonClose: true, swipeToClose: false, onClosed: function onClosed() {
                            _this.setState({ regimen: { name: '', trainingGroupIds: [] } });_reactNativeRouterFlux.Actions.refresh({ isModalVisible: false });
                        }, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 140
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.View,
                        { onLayout: function onLayout(ev) {
                                _this.resizeModal(ev);
                            }, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 141
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.ScrollView,
                            {
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 142
                                }
                            },
                            _react2.default.createElement(
                                _ui.Card,
                                { title: (_this.state.regimen.id ? 'Edit' : 'Add') + ' Regimen', __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 143
                                    }
                                },
                                _react2.default.createElement(
                                    _ui.FormLabel,
                                    { labelStyle: [_theme.AppStyles.h4, { fontWeight: 'bold', color: '#000000', marginBottom: 0 }], __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 145
                                        }
                                    },
                                    'Name'
                                ),
                                _react2.default.createElement(_ui.FormInput, { containerStyle: { borderLeftWidth: 1, borderRightWidth: 1, borderTopWidth: 1, borderBottomWidth: 1, borderColor: _theme.AppColors.border }, inputContainer: { backgroundColor: '#ffffff', paddingLeft: 15, paddingRight: 15, borderBottomColor: 'transparent' }, value: _this.state.regimen.name, onChangeText: function onChangeText(name) {
                                        return _this.setState({ regimen: { name: name, trainingGroupIds: _this.state.regimen.trainingGroupIds } });
                                    }, __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 146
                                    }
                                }),
                                _react2.default.createElement(_ui.Spacer, {
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 147
                                    }
                                }),
                                _react2.default.createElement(
                                    _ui.FormLabel,
                                    { labelStyle: [_theme.AppStyles.h4, { fontWeight: 'bold', color: '#000000', marginBottom: 0 }], __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 148
                                        }
                                    },
                                    'Training Groups'
                                ),
                                _this.state.trainingGroups.map(function (group) {
                                    return _react2.default.createElement(_reactNativeElements.CheckBox, { key: group.id, title: group.title, onPress: function onPress() {
                                            _this.toggleTrainingGroup(group.id);
                                        }, checked: _this.state.regimen.trainingGroupIds ? _this.state.regimen.trainingGroupIds.some(function (id) {
                                            return id === group.id;
                                        }) : false, __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 151
                                        }
                                    });
                                }),
                                _react2.default.createElement(_ui.Spacer, {
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 154
                                    }
                                }),
                                _react2.default.createElement(_ui.Button, {
                                    title: 'Save',
                                    onPress: function onPress() {
                                        if (_this.state.regimen.id) {
                                            _this.editRegimen();
                                        } else {
                                            _this.addRegimen();
                                        }
                                    },
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 156
                                    }
                                })
                            )
                        )
                    )
                )
            );
        };

        _this.state = {
            modalStyle: {},
            regimen: { name: '', trainingGroupIds: [] },
            regimens: _this.props.regimens,
            trainingGroups: _this.props.trainingGroups
        };
        return _this;
    }

    _createClass(RegimensView, [{
        key: 'resizeModal',
        value: function resizeModal(ev) {
            this.setState({ modalStyle: { height: _theme.AppStyles.windowSize.height - 80 > ev.nativeEvent.layout.height ? ev.nativeEvent.layout.height : _theme.AppStyles.windowSize.height - 80, width: ev.nativeEvent.layout.width } });
        }
    }]);

    return RegimensView;
}(_react.Component);

RegimensView.componentName = 'RegimensView';
RegimensView.propTypes = {
    regimens: _react.PropTypes.array,
    trainingGroups: _react.PropTypes.array,
    isModalVisible: _react.PropTypes.bool,
    addRegimen: _react.PropTypes.func.isRequired,
    editRegimen: _react.PropTypes.func.isRequired,
    removeRegimen: _react.PropTypes.func.isRequired
};
RegimensView.defaultProps = {
    regimens: [],
    trainingGroups: [],
    isModalVisible: false
};
exports.default = RegimensView;