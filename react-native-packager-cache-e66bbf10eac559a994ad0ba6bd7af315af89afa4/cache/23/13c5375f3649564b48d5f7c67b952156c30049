Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = '/Users/vdesai/Biometrix/FathomMobile/node_modules/react-native-prompt/src/Prompt.js';

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require('react-native');

var _styles = require('./styles');

var _styles2 = babelHelpers.interopRequireDefault(_styles);

var Prompt = function (_Component) {
  babelHelpers.inherits(Prompt, _Component);

  function Prompt() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, Prompt);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = Prompt.__proto__ || Object.getPrototypeOf(Prompt)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      value: '',
      visible: false
    }, _this._onChangeText = function (value) {
      _this.setState({ value: value });
      _this.props.onChangeText(value);
    }, _this._onSubmitPress = function () {
      var value = _this.state.value;

      _this.props.onSubmit(value);
    }, _this._onCancelPress = function () {
      _this.props.onCancel();
    }, _this.close = function () {
      _this.setState({ visible: false });
    }, _this._renderDialog = function () {
      var _this$props = _this.props,
          title = _this$props.title,
          placeholder = _this$props.placeholder,
          defaultValue = _this$props.defaultValue,
          cancelText = _this$props.cancelText,
          submitText = _this$props.submitText,
          borderColor = _this$props.borderColor,
          promptStyle = _this$props.promptStyle,
          titleStyle = _this$props.titleStyle,
          buttonStyle = _this$props.buttonStyle,
          buttonTextStyle = _this$props.buttonTextStyle,
          submitButtonStyle = _this$props.submitButtonStyle,
          submitButtonTextStyle = _this$props.submitButtonTextStyle,
          cancelButtonStyle = _this$props.cancelButtonStyle,
          cancelButtonTextStyle = _this$props.cancelButtonTextStyle,
          inputStyle = _this$props.inputStyle;

      return _react2.default.createElement(
        _reactNative.View,
        { style: _styles2.default.dialog, key: 'prompt', __source: {
            fileName: _jsxFileName,
            lineNumber: 105
          }
        },
        _react2.default.createElement(_reactNative.View, { style: _styles2.default.dialogOverlay, __source: {
            fileName: _jsxFileName,
            lineNumber: 106
          }
        }),
        _react2.default.createElement(
          _reactNative.View,
          { style: [_styles2.default.dialogContent, { borderColor: borderColor }, promptStyle], __source: {
              fileName: _jsxFileName,
              lineNumber: 107
            }
          },
          _react2.default.createElement(
            _reactNative.View,
            { style: [_styles2.default.dialogTitle, { borderColor: borderColor }], __source: {
                fileName: _jsxFileName,
                lineNumber: 108
              }
            },
            _react2.default.createElement(
              _reactNative.Text,
              { style: [_styles2.default.dialogTitleText, titleStyle], __source: {
                  fileName: _jsxFileName,
                  lineNumber: 109
                }
              },
              title
            )
          ),
          _react2.default.createElement(
            _reactNative.View,
            { style: _styles2.default.dialogBody, __source: {
                fileName: _jsxFileName,
                lineNumber: 113
              }
            },
            _react2.default.createElement(_reactNative.TextInput, babelHelpers.extends({
              style: [_styles2.default.dialogInput, inputStyle],
              defaultValue: defaultValue,
              onChangeText: _this._onChangeText,
              placeholder: placeholder,
              autoFocus: true,
              underlineColorAndroid: 'white'
            }, _this.props.textInputProps, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 114
              }
            }))
          ),
          _react2.default.createElement(
            _reactNative.View,
            { style: [_styles2.default.dialogFooter, { borderColor: borderColor }], __source: {
                fileName: _jsxFileName,
                lineNumber: 123
              }
            },
            _react2.default.createElement(
              _reactNative.TouchableWithoutFeedback,
              { onPress: _this._onCancelPress, __source: {
                  fileName: _jsxFileName,
                  lineNumber: 124
                }
              },
              _react2.default.createElement(
                _reactNative.View,
                { style: [_styles2.default.dialogAction, buttonStyle, cancelButtonStyle], __source: {
                    fileName: _jsxFileName,
                    lineNumber: 125
                  }
                },
                _react2.default.createElement(
                  _reactNative.Text,
                  { style: [_styles2.default.dialogActionText, buttonTextStyle, cancelButtonTextStyle], __source: {
                      fileName: _jsxFileName,
                      lineNumber: 126
                    }
                  },
                  cancelText
                )
              )
            ),
            _react2.default.createElement(
              _reactNative.TouchableWithoutFeedback,
              { onPress: _this._onSubmitPress, __source: {
                  fileName: _jsxFileName,
                  lineNumber: 131
                }
              },
              _react2.default.createElement(
                _reactNative.View,
                { style: [_styles2.default.dialogAction, buttonStyle, submitButtonStyle], __source: {
                    fileName: _jsxFileName,
                    lineNumber: 132
                  }
                },
                _react2.default.createElement(
                  _reactNative.Text,
                  { style: [_styles2.default.dialogActionText, buttonTextStyle, submitButtonTextStyle], __source: {
                      fileName: _jsxFileName,
                      lineNumber: 133
                    }
                  },
                  submitText
                )
              )
            )
          )
        )
      );
    }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(Prompt, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.setState({ value: this.props.defaultValue });
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var visible = nextProps.visible,
          defaultValue = nextProps.defaultValue;

      this.setState({ visible: visible, value: defaultValue });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      return _react2.default.createElement(
        _reactNative.Modal,
        { onRequestClose: function onRequestClose() {
            return _this2.close();
          }, transparent: true, visible: this.props.visible, __source: {
            fileName: _jsxFileName,
            lineNumber: 146
          }
        },
        this._renderDialog()
      );
    }
  }]);
  return Prompt;
}(_react.Component);

Prompt.propTypes = {
  title: _react.PropTypes.string.isRequired,
  visible: _react.PropTypes.bool,
  defaultValue: _react.PropTypes.string,
  placeholder: _react.PropTypes.string,
  onCancel: _react.PropTypes.func.isRequired,
  cancelText: _react.PropTypes.string,
  onSubmit: _react.PropTypes.func.isRequired,
  submitText: _react.PropTypes.string,
  onChangeText: _react.PropTypes.func.isRequired,
  borderColor: _react.PropTypes.string,
  promptStyle: _react.PropTypes.object,
  titleStyle: _react.PropTypes.object,
  buttonStyle: _react.PropTypes.object,
  buttonTextStyle: _react.PropTypes.object,
  submitButtonStyle: _react.PropTypes.object,
  submitButtonTextStyle: _react.PropTypes.object,
  cancelButtonStyle: _react.PropTypes.object,
  cancelButtonTextStyle: _react.PropTypes.object,
  inputStyle: _react.PropTypes.object,
  textInputProps: _react.PropTypes.object
};
Prompt.defaultProps = {
  visible: false,
  defaultValue: '',
  cancelText: 'Cancel',
  submitText: 'OK',
  borderColor: '#ccc',
  promptStyle: {},
  titleStyle: {},
  buttonStyle: {},
  buttonTextStyle: {},
  submitButtonStyle: {},
  submitButtonTextStyle: {},
  cancelButtonStyle: {},
  cancelButtonTextStyle: {},
  inputStyle: {},
  onChangeText: function onChangeText() {}
};
exports.default = Prompt;
;